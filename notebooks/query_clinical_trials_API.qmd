---
title: "Query API from clinicaltrials.gov"
author: "Shefali Lathwal"
date: "2025-04-30"
last-modified: true
format: html
toc: true
jupyter: clinical_trial
---

```{python}
import requests
import pandas as pd

# Gynecological conditions to query
conditions = ["adenomyosis", "endometriosis", "PCOS", "uterine fibroids"]

# test the API
base_url = "https://clinicaltrials.gov/api/v2"
endpoint = "/studies?"
query = f"query.term={conditions[0]}&pageSize=100"

url = base_url + endpoint + query
print(url)

response = requests.get(url)
```

```{python}
print(response.status_code)
#print(response.json())
print(response.json().keys())
##print(response.json()["studies"])
print(len(response.json()["studies"]))
print((response.json()["studies"][0].keys()))
print((response.json()["studies"][0]["protocolSection"]))
print((response.json()["studies"][0]["protocolSection"].keys()))
print((response.json()["studies"][0]["protocolSection"]["conditionsModule"]))

print([study["protocolSection"]["identificationModule"]["nctId"] for study in response.json()["studies"]])
```

```{python}
response.json()["nextPageToken"]
```

# Query next pages
```{python}
url2 = url+"&pageToken="+response.json()["nextPageToken"]
print(url2)
response2 = requests.get(url2)

```

```{python}
print(response2.status_code)
print(len(response.json()["studies"]))
response2.json().keys()
print([study["protocolSection"]["identificationModule"]["nctId"] for study in response2.json()["studies"]])
```

- I have to worry about how to download all results based on page token. But I will do that later.
Let's focus on studies that are curerntly recruiting or note yet started recruiting.

```{python}
import requests
import pandas as pd

# Gynecological conditions to query
conditions = ["adenomyosis", "endometriosis", "PCOS", "uterine fibroids"]

# test the API
base_url = "https://clinicaltrials.gov/api/v2"
endpoint = "/studies?"
query = f"query.cond={conditions[0]}"
filter = "&filter.overallStatus=NOT_YET_RECRUITING,RECRUITING,ACTIVE_NOT_RECRUITING,ENROLLING_BY_INVITATION"
return_fields = "&fields=NCTId,BriefTitle,OverallStatus,HasResults,Condition"
study_count = "&countTotal=true"
page_size = "&pageSize=100"

url = base_url + endpoint + query+filter+return_fields+study_count+page_size
print(url)

response = requests.get(url)
```

```{python}
print(response.status_code)
#print(response.json())
print(response.json().keys())
print(response.json()["totalCount"])
#print(response.json()["studies"])
print(len(response.json()["studies"]))
print((response.json()["studies"][0].keys()))
print((response.json()["studies"][0]["protocolSection"]))
print((response.json()["studies"][0]["protocolSection"].keys()))
print((response.json()["studies"][0]["protocolSection"]["conditionsModule"]))

print([study["protocolSection"]["identificationModule"]["nctId"] for study in response.json()["studies"]])
```

# Look at total number of studies for each conditions

```{python}
for condition in conditions:
    base_url = "https://clinicaltrials.gov/api/v2"
    endpoint = "/studies?"
    query = f"query.cond={condition}"
    filter = "&filter.overallStatus=NOT_YET_RECRUITING,RECRUITING,ACTIVE_NOT_RECRUITING,ENROLLING_BY_INVITATION"
    return_fields = "&fields=NCTId,BriefTitle,OverallStatus,HasResults,Condition"
    study_count = "&countTotal=true"
    page_size = "&pageSize=100"

    url = base_url + endpoint + query+filter+return_fields+study_count+page_size
    #print(url)

    response = requests.get(url)
    print(f"{condition}:",response.json()["totalCount"])
```

# Get the results for all trials for each condition

```{python}
fields = [
    "NCTId",
    "BriefTitle",
    "Condition",
    "EligibilityCriteria",
    "LocationCountry",
    "LocationState",
    "StudyType",
    "InterventionType",
    "OverallStatus",
    "HasResults"
]

all_trials = []
for condition in conditions:
    base_url = "https://clinicaltrials.gov/api/v2"
    endpoint = "/studies?"
    query = f"query.cond={condition}"
    filter = "&filter.overallStatus=NOT_YET_RECRUITING,RECRUITING,ACTIVE_NOT_RECRUITING,ENROLLING_BY_INVITATION"
    return_fields = f"&fields={','.join(fields)}"
    study_count = "&countTotal=true"
    page_size = "&pageSize=100"

    url = base_url + endpoint + query+filter+return_fields+study_count+page_size
    #print(url)

    response = requests.get(url)
    print(f"{condition}:",response.json()["totalCount"])
    data = response.json()["studies"]
    for entry in data:
        all_trials.append(entry)

    # If number of trials is more than 100, then we need to fetch more trials from next page
    # We will check if nextPageToken key is present
    while "nextPageToken" in response.json().keys():
        next_page_token = response.json()["nextPageToken"]
        page_token ="&pageToken="+next_page_token 
        new_url = base_url + endpoint + query+filter+return_fields+study_count+page_size+page_token
        response = requests.get(new_url)
        print(f"Condition: {condition}")
        if response.status_code == 200:
            data = response.json()["studies"]
            #print(response.json()["nextPageToken"])
            for entry in data:
                all_trials.append(entry)



```

```{python}
print(len(all_trials))
print(all_trials[0].keys())
print(all_trials[-17])
print(all_trials[1]["protocolSection"].keys())

trial_dict = [{"id": "1", "name": "trial1"},{"id": "2", "name": "trial2", "alias": 3}]
trial_dict2 = [{"id": [1,2], "name":["trial1", "trial2"], "alias":[None, 3.0]}]
pd.DataFrame(trial_dict2)

```

```{python}
len(all_trials)
print(all_trials[0])

fields = [
    "NCTId",
    "BriefTitle",
    "Condition",
    "EligibilityCriteria",
    "LocationCountry",
    "LocationState",
    "StudyType",
    "InterventionType",
    "OverallStatus",
    "HasResults"
]
output_fields = []
for trial in all_trials:
    trial_dict = {}
    for field in fields:
        #print(field)
        if field == "NCTId" :
            trial_dict[field] = trial["protocolSection"]["identificationModule"]["nctId"]
        if field == "BriefTitle":
            trial_dict[field] = trial["protocolSection"]["identificationModule"]["briefTitle"]
        if field == "Condition":
            trial_dict[field] = trial["protocolSection"]["conditionsModule"]["conditions"]
        if field == "EligibilityCriteria":
            trial_dict[field] = trial["protocolSection"]["eligibilityModule"]["eligibilityCriteria"]
        if field == "LocationCountry":
            if "contactsLocationsModule" in trial["protocolSection"]:
                if "locations" in trial["protocolSection"]["contactsLocationsModule"]:
                    locations_list = []
                    for location in trial["protocolSection"]["contactsLocationsModule"]["locations"]:
                        if "state" in location.keys():
                            locations_list.append(location["state"]+", "+location["country"])
                        else: 
                            locations_list.append(location["country"])   
                    trial_dict["Location"] = locations_list 
        #if field == "Phase":
            # A lot of trials do not have the phases key
        #    trial_dict[field] = trial["protocolSection"]["designModule"]["phases"]
        if field == "StudyType":
            trial_dict[field] = trial["protocolSection"]["designModule"]["studyType"]
        if field == "InterventionType":
            if "armsInterventionModule" in trial["protocolSection"]:
                trial_dict[field] = trial["protocolSection"]["armsInterventionModule"]["interventions"]
        if field == "OverallStatus":
            trial_dict[field] = trial["protocolSection"]["statusModule"]["overallStatus"]
        if field == "HasResults":
            trial_dict[field] = trial["hasResults"]
        

    output_fields.append(trial_dict)
#output_fields
```

```{python}
df = pd.DataFrame(output_fields)
df.head()
```

Save dataframe to csv file
```{python}
df.to_csv("../data/clinical_trials_gyn.csv", index = False)
```